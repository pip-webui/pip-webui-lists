{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/dependencies/translate.ts","src/lists.ts","src/tag_list/tag_list.ts","temp/pip-webui-lists-html.min.js"],"names":[],"mappings":"AAAA;ACOA,CAAC;IACG,YAAY,CAAC;IAEb,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;IAEzD,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,SAAS;QAC9C,IAAI,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC;cAC1C,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QAE3C,MAAM,CAAC,UAAU,GAAG;YAChB,MAAM,CAAC,YAAY,GAAI,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;QACpE,CAAC,CAAA;IACL,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,EAAE,CAAC;;;ACdL,CAAC;IACG,YAAY,CAAC;IAEb,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE;QAC1B,YAAY;KACZ,CAAC,CAAC;AAEP,CAAC,CAAC,EAAE,CAAC;;;ACLL,CAAC;IACG,YAAY,CAAC;IAEb,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAOrE,UAAU,CAAC,SAAS,CAAC,YAAY,EAC7B,UAAU,MAAM;QACZ,MAAM,CAAC;YACH,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE;gBACH,OAAO,EAAE,GAAG;gBACZ,OAAO,EAAE,GAAG;gBACZ,YAAY,EAAE,GAAG;aACpB;YACD,WAAW,EAAE,wBAAwB;YACrC,UAAU,EAAE,UAAU,MAAM,EAAE,QAAQ,EAAE,MAAM;gBAC1C,IAAI,UAAU,CAAC;gBAEf,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACpC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAEjC,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;gBAEjC,mBAAmB,KAAK;oBACpB,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC,KAAK,CAAC;oBAChC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;wBAAC,MAAM,CAAC,KAAK,CAAC;oBACzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;oBACvC,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,MAAM,CAAC;gBAC3C,CAAC;gBAGD,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC9B,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE;wBACtB,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;oBACrC,CAAC,CAAC,CAAC;gBACP,CAAC;gBAGD,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YACtC,CAAC;SACJ,CAAC;IACN,CAAC,CACJ,CAAC;AAEN,CAAC,CAAC,EAAE,CAAC;;;AC1DL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-lists.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @file Optional filter to translate string resources\n * @copyright Digital Living Software Corp. 2014-2016\n */\n \n/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipList.Translate', []);\n\n    thisModule.filter('translate', function ($injector) {\n        var pipTranslate = $injector.has('pipTranslate') \n            ? $injector.get('pipTranslate') : null;\n\n        return function (key) {\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\n        }\n    });\n\n})();\n","ï»¿/**\n * @file Registration of all WebUI list controls\n * @copyright Digital Living Software Corp. 2014-2016\n */\n\n/* global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('pipLists', [\n\t    'pipTagList'\n    ]);\n    \n})();","/**\n * @file Tag list control\n * @copyright Digital Living Software Corp. 2014-2015\n * @todo\n * - Improve samples in sampler app\n * - What's pipType and pipTypeLocal? Give better name\n * - Do not use ng-if, instead generate template statically\n */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTagList', ['pipList.Translate']);\n\n    /**\n     * pipTags - set of tags\n     * pipType - additional type tag\n     * pipTypeLocal - additional translated type tag\n     */\n    thisModule.directive('pipTagList',\n        function ($parse) {\n            return {\n                restrict: 'EA',\n                scope: {\n                    pipTags: '=',\n                    pipType: '=',\n                    pipTypeLocal: '='\n                },\n                templateUrl: 'tag_list/tag_list.html',\n                controller: function ($scope, $element, $attrs) {\n                    var tagsGetter;\n\n                    tagsGetter = $parse($attrs.pipTags);\n                    $element.css('display', 'block');\n                    // Set tags\n                    $scope.tags = tagsGetter($scope);\n\n                    function toBoolean(value) {\n                        if (value == null) return false;\n                        if (!value) return false;\n                        value = value.toString().toLowerCase();\n                        return value == '1' || value == 'true';\n                    }\n\n                    // Also optimization to avoid watch if it is unnecessary\n                    if (toBoolean($attrs.pipRebind)) {\n                        $scope.$watch(tagsGetter, function () {\n                            $scope.tags = tagsGetter($scope);\n                        });\n                    }\n\n                    // Add class\n                    $element.addClass('pip-tag-list');\n                }\n            };\n        }\n    );\n\n})();\n","(function(module) {\ntry {\n  module = angular.module('pipLists.Templates');\n} catch (e) {\n  module = angular.module('pipLists.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('tag_list/tag_list.html',\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + pipType + \\'-chips\\'}}\" ng-if=\"pipType && !pipTypeLocal\"><span>{{pipType.toUpperCase() | translate | uppercase}}</span></div><div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + pipType + \\'-chips\\'}}\" ng-if=\"pipType && pipTypeLocal\"><span>{{pipTypeLocal.toUpperCase() | translate | uppercase}}</span></div><div class=\"pip-chip rm4\" ng-repeat=\"tag in pipTags\"><span>{{::tag}}</span></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-lists-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvZGVwZW5kZW5jaWVzL3RyYW5zbGF0ZS50cyIsInNyYy9saXN0cy50cyIsInNyYy90YWdfbGlzdC90YWdfbGlzdC50cyIsInRlbXAvcGlwLXdlYnVpLWxpc3RzLWh0bWwubWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDT0EsQ0FBQztJQUNHLFlBQVksQ0FBQztJQUViLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFekQsVUFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsVUFBVSxTQUFTO1FBQzlDLElBQUksWUFBWSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO2NBQzFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRTNDLE1BQU0sQ0FBQyxVQUFVLEdBQUc7WUFDaEIsTUFBTSxDQUFDLFlBQVksR0FBSSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDcEUsQ0FBQyxDQUFBO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsRUFBRSxDQUFDOzs7QUNkTCxDQUFDO0lBQ0csWUFBWSxDQUFDO0lBRWIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7UUFDMUIsWUFBWTtLQUNaLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxFQUFFLENBQUM7OztBQ0xMLENBQUM7SUFDRyxZQUFZLENBQUM7SUFFYixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztJQU9yRSxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksRUFDN0IsVUFBVSxNQUFNO1FBQ1osTUFBTSxDQUFDO1lBQ0gsUUFBUSxFQUFFLElBQUk7WUFDZCxLQUFLLEVBQUU7Z0JBQ0gsT0FBTyxFQUFFLEdBQUc7Z0JBQ1osT0FBTyxFQUFFLEdBQUc7Z0JBQ1osWUFBWSxFQUFFLEdBQUc7YUFDcEI7WUFDRCxXQUFXLEVBQUUsd0JBQXdCO1lBQ3JDLFVBQVUsRUFBRSxVQUFVLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTTtnQkFDMUMsSUFBSSxVQUFVLENBQUM7Z0JBRWYsVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3BDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUVqQyxNQUFNLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFakMsbUJBQW1CLEtBQUs7b0JBQ3BCLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUM7d0JBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDaEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7d0JBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDekIsS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFDdkMsTUFBTSxDQUFDLEtBQUssSUFBSSxHQUFHLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQztnQkFDM0MsQ0FBQztnQkFHRCxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7d0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNyQyxDQUFDLENBQUMsQ0FBQztnQkFDUCxDQUFDO2dCQUdELFFBQVEsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdEMsQ0FBQztTQUNKLENBQUM7SUFDTixDQUFDLENBQ0osQ0FBQztBQUVOLENBQUMsQ0FBQyxFQUFFLENBQUM7OztBQzFETDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qKlxuICogQGZpbGUgT3B0aW9uYWwgZmlsdGVyIHRvIHRyYW5zbGF0ZSBzdHJpbmcgcmVzb3VyY2VzXG4gKiBAY29weXJpZ2h0IERpZ2l0YWwgTGl2aW5nIFNvZnR3YXJlIENvcnAuIDIwMTQtMjAxNlxuICovXG4gXG4vKiBnbG9iYWwgYW5ndWxhciAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciB0aGlzTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcExpc3QuVHJhbnNsYXRlJywgW10pO1xuXG4gICAgdGhpc01vZHVsZS5maWx0ZXIoJ3RyYW5zbGF0ZScsIGZ1bmN0aW9uICgkaW5qZWN0b3IpIHtcbiAgICAgICAgdmFyIHBpcFRyYW5zbGF0ZSA9ICRpbmplY3Rvci5oYXMoJ3BpcFRyYW5zbGF0ZScpIFxuICAgICAgICAgICAgPyAkaW5qZWN0b3IuZ2V0KCdwaXBUcmFuc2xhdGUnKSA6IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBwaXBUcmFuc2xhdGUgID8gcGlwVHJhbnNsYXRlLnRyYW5zbGF0ZShrZXkpIHx8IGtleSA6IGtleTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG59KSgpO1xuIiwi77u/LyoqXG4gKiBAZmlsZSBSZWdpc3RyYXRpb24gb2YgYWxsIFdlYlVJIGxpc3QgY29udHJvbHNcbiAqIEBjb3B5cmlnaHQgRGlnaXRhbCBMaXZpbmcgU29mdHdhcmUgQ29ycC4gMjAxNC0yMDE2XG4gKi9cblxuLyogZ2xvYmFsIGFuZ3VsYXIgKi9cblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgncGlwTGlzdHMnLCBbXG5cdCAgICAncGlwVGFnTGlzdCdcbiAgICBdKTtcbiAgICBcbn0pKCk7IiwiLyoqXG4gKiBAZmlsZSBUYWcgbGlzdCBjb250cm9sXG4gKiBAY29weXJpZ2h0IERpZ2l0YWwgTGl2aW5nIFNvZnR3YXJlIENvcnAuIDIwMTQtMjAxNVxuICogQHRvZG9cbiAqIC0gSW1wcm92ZSBzYW1wbGVzIGluIHNhbXBsZXIgYXBwXG4gKiAtIFdoYXQncyBwaXBUeXBlIGFuZCBwaXBUeXBlTG9jYWw/IEdpdmUgYmV0dGVyIG5hbWVcbiAqIC0gRG8gbm90IHVzZSBuZy1pZiwgaW5zdGVhZCBnZW5lcmF0ZSB0ZW1wbGF0ZSBzdGF0aWNhbGx5XG4gKi9cblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgdGhpc01vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBUYWdMaXN0JywgWydwaXBMaXN0LlRyYW5zbGF0ZSddKTtcblxuICAgIC8qKlxuICAgICAqIHBpcFRhZ3MgLSBzZXQgb2YgdGFnc1xuICAgICAqIHBpcFR5cGUgLSBhZGRpdGlvbmFsIHR5cGUgdGFnXG4gICAgICogcGlwVHlwZUxvY2FsIC0gYWRkaXRpb25hbCB0cmFuc2xhdGVkIHR5cGUgdGFnXG4gICAgICovXG4gICAgdGhpc01vZHVsZS5kaXJlY3RpdmUoJ3BpcFRhZ0xpc3QnLFxuICAgICAgICBmdW5jdGlvbiAoJHBhcnNlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBpcFRhZ3M6ICc9JyxcbiAgICAgICAgICAgICAgICAgICAgcGlwVHlwZTogJz0nLFxuICAgICAgICAgICAgICAgICAgICBwaXBUeXBlTG9jYWw6ICc9J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0YWdfbGlzdC90YWdfbGlzdC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWdzR2V0dGVyO1xuXG4gICAgICAgICAgICAgICAgICAgIHRhZ3NHZXR0ZXIgPSAkcGFyc2UoJGF0dHJzLnBpcFRhZ3MpO1xuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRhZ3NcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhZ3MgPSB0YWdzR2V0dGVyKCRzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdG9Cb29sZWFuKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gJzEnIHx8IHZhbHVlID09ICd0cnVlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsc28gb3B0aW1pemF0aW9uIHRvIGF2b2lkIHdhdGNoIGlmIGl0IGlzIHVubmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b0Jvb2xlYW4oJGF0dHJzLnBpcFJlYmluZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2godGFnc0dldHRlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YWdzID0gdGFnc0dldHRlcigkc2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgY2xhc3NcbiAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ3BpcC10YWctbGlzdCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICApO1xuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcExpc3RzLlRlbXBsYXRlcycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwTGlzdHMuVGVtcGxhdGVzJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCd0YWdfbGlzdC90YWdfbGlzdC5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cInBpcC1jaGlwIHJtNCBwaXAtdHlwZS1jaGlwIHBpcC10eXBlLWNoaXAtbGVmdCB7e1xcJ2JnLVxcJyArIHBpcFR5cGUgKyBcXCctY2hpcHNcXCd9fVwiIG5nLWlmPVwicGlwVHlwZSAmJiAhcGlwVHlwZUxvY2FsXCI+PHNwYW4+e3twaXBUeXBlLnRvVXBwZXJDYXNlKCkgfCB0cmFuc2xhdGUgfCB1cHBlcmNhc2V9fTwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwicGlwLWNoaXAgcm00IHBpcC10eXBlLWNoaXAgcGlwLXR5cGUtY2hpcC1sZWZ0IHt7XFwnYmctXFwnICsgcGlwVHlwZSArIFxcJy1jaGlwc1xcJ319XCIgbmctaWY9XCJwaXBUeXBlICYmIHBpcFR5cGVMb2NhbFwiPjxzcGFuPnt7cGlwVHlwZUxvY2FsLnRvVXBwZXJDYXNlKCkgfCB0cmFuc2xhdGUgfCB1cHBlcmNhc2V9fTwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwicGlwLWNoaXAgcm00XCIgbmctcmVwZWF0PVwidGFnIGluIHBpcFRhZ3NcIj48c3Bhbj57ezo6dGFnfX08L3NwYW4+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXAtd2VidWktbGlzdHMtaHRtbC5taW4uanMubWFwXG4iXX0="}