{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/dependencies/translate.ts","src/lists.ts","src/tag_list/tag_list.ts","temp/pip-webui-lists-html.js"],"names":[],"mappings":"AAAA;ACAA,mBAAmB,SAAS;IACxB,IAAI,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC;UAC1C,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;IAE3C,MAAM,CAAC,UAAU,GAAG;QAChB,MAAM,CAAC,YAAY,GAAI,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;IACpE,CAAC,CAAA;AACL,CAAC;AAED,OAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC;KAClC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;;;;ACVnC,oCAAkC;AAEnC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,CAAE,YAAY,CAAE,CAAC,CAAC;;;;ACI7C;IAOI,2BACK,MAAiB,EACjB,QAAgC;QAIjC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACjC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IACrC,CAAC;IAEO,qCAAS,GAAjB,UAAkB,KAAa;QAC5B,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAC1D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,MAAM,CAAC;IAC1C,CAAC;IAEK,sCAAU,GAAjB,UAAkB,OAAuB;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;QAC1C,CAAC;IAEL,CAAC;IAEJ,wBAAC;AAAD,CA/BD,AA+BE,IAAA;AAWF,IAAM,eAAe,GAAqB;IACtC,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE,UAAU;IAChB,SAAS,EAAE,eAAe;IAC1B,MAAM,EAAE,YAAY;CACvB,CAAA;AAED;IAAA;IAOA,CAAC;IAAD,qBAAC;AAAD,CAPA,AAOC,IAAA;AAPY,wCAAc;AAS3B,IAAM,OAAO,GAAG;IACR,QAAQ,EAAE,GAAG;IACb,QAAQ,EAAE,eAAe;IACzB,WAAW,EAAE,wBAAwB;IACrC,UAAU,EAAE,iBAAiB;IAC7B,YAAY,EAAE,OAAO;CACxB,CAAA;AAEL,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,mBAAmB,CAAC,CAAC;KAC9C,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;;ACzErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-lists.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function translate($injector) {\r\n    var pipTranslate = $injector.has('pipTranslate') \r\n        ? $injector.get('pipTranslate') : null;\r\n\r\n    return function (key) {\r\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n    }\r\n}\r\n\r\nangular.module('pipList.Translate', [])\r\n    .filter('translate', translate);\r\n","ï»¿import './dependencies/translate';\r\n\r\nangular.module('pipLists', [ 'pipTagList' ]);\r\n","interface ITagList {\r\n    tags: string[];\r\n    type: string;\r\n    typeLocal: string;\r\n}\r\n\r\nclass TagListController implements ITagList {\r\n    public rebind: string;\r\n\r\n    public tags: string[];\r\n    public type: string;\r\n    public typeLocal: string;\r\n\r\n    constructor(\r\n         $scope: ng.IScope, \r\n         $element: ng.IRootElementService\r\n    ) {\r\n\r\n        // Set tags\r\n        $element.css('display', 'block');\r\n        $element.addClass('pip-tag-list');\r\n     }\r\n\r\n     private toBoolean(value: string): boolean {\r\n        if (_.isNull(value) || _.isUndefined(value)) return false;\r\n        if (!value) return false;\r\n        value = value.toString().toLowerCase();\r\n        return value == '1' || value == 'true';\r\n     }\r\n\r\n    public $onChanges(changes: TagListChanges) {\r\n        if (this.rebind && changes.tags) {\r\n            this.tags = changes.tags.currentValue;\r\n        }\r\n\r\n    }\r\n\r\n }\r\n\r\nexport interface ITagListBindings {\r\n    [key: string]: any;\r\n\r\n    tags: any,\r\n    type: any,\r\n    typeLocal: any,\r\n    rebuid: any\r\n}\r\n\r\nconst TagListBindings: ITagListBindings = {\r\n    tags: '<pipTags',\r\n    type: '<pipType',\r\n    typeLocal: '<pipTypeLocal',\r\n    rebuid: '<pipRebind'\r\n}\r\n\r\nexport class TagListChanges implements ng.IOnChangesObject, ITagListBindings {\r\n    [key: string]: ng.IChangesObject<any>;\r\n    \r\n    tags: ng.IChangesObject<string[]>;\r\n    type: ng.IChangesObject<string>;\r\n    typeLocal: ng.IChangesObject<string>;\r\n    rebuid: ng.IChangesObject<boolean>\r\n}\r\n\r\nconst TagList = {\r\n        restrict: 'E',\r\n        bindings: TagListBindings,\r\n        templateUrl: 'tag_list/tag_list.html',\r\n        controller: TagListController,\r\n        controllerAs: '$ctrl'\r\n    }\r\n\r\nangular.module('pipTagList', ['pipList.Translate'])\r\n    .component('pipTagList', TagList)\r\n","(function(module) {\ntry {\n  module = angular.module('pipLists.Templates');\n} catch (e) {\n  module = angular.module('pipLists.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('tag_list/tag_list.html',\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + $ctrl.type + \\'-chips\\'}}\"\\n' +\n    '     ng-if=\"$ctrl.type && !$ctrl.typeLocal\">\\n' +\n    '\\n' +\n    '    <span>{{$ctrl.type.toUpperCase() | translate | uppercase}}</span>\\n' +\n    '</div>\\n' +\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + $ctrl.type + \\'-chips\\'}}\"\\n' +\n    '     ng-if=\"$ctrl.type && $ctrl.typeLocal\">\\n' +\n    '\\n' +\n    '    <span>{{$ctrl.typeLocal.toUpperCase() | translate | uppercase}}</span>\\n' +\n    '</div>\\n' +\n    '<div class=\"pip-chip rm4\" ng-repeat=\"tag in $ctrl.tags\">\\n' +\n    '    <span>{{::tag}}</span>\\n' +\n    '</div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-lists-html.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvZGVwZW5kZW5jaWVzL3RyYW5zbGF0ZS50cyIsInNyYy9saXN0cy50cyIsInNyYy90YWdfbGlzdC90YWdfbGlzdC50cyIsInRlbXAvcGlwLXdlYnVpLWxpc3RzLWh0bWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxtQkFBbUIsU0FBUztJQUN4QixJQUFJLFlBQVksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQztVQUMxQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUUzQyxNQUFNLENBQUMsVUFBVSxHQUFHO1FBQ2hCLE1BQU0sQ0FBQyxZQUFZLEdBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ3BFLENBQUMsQ0FBQTtBQUNMLENBQUM7QUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQztLQUNsQyxNQUFNLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDOzs7O0FDVm5DLG9DQUFrQztBQUVuQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFFLFlBQVksQ0FBRSxDQUFDLENBQUM7Ozs7QUNJN0M7SUFPSSwyQkFDSyxNQUFpQixFQUNqQixRQUFnQztRQUlqQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqQyxRQUFRLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTyxxQ0FBUyxHQUFqQixVQUFrQixLQUFhO1FBQzVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDMUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ3pCLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdkMsTUFBTSxDQUFDLEtBQUssSUFBSSxHQUFHLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQztJQUMxQyxDQUFDO0lBRUssc0NBQVUsR0FBakIsVUFBa0IsT0FBdUI7UUFDckMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzFDLENBQUM7SUFFTCxDQUFDO0lBRUosd0JBQUM7QUFBRCxDQS9CRCxBQStCRSxJQUFBO0FBV0YsSUFBTSxlQUFlLEdBQXFCO0lBQ3RDLElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUksRUFBRSxVQUFVO0lBQ2hCLFNBQVMsRUFBRSxlQUFlO0lBQzFCLE1BQU0sRUFBRSxZQUFZO0NBQ3ZCLENBQUE7QUFFRDtJQUFBO0lBT0EsQ0FBQztJQUFELHFCQUFDO0FBQUQsQ0FQQSxBQU9DLElBQUE7QUFQWSx3Q0FBYztBQVMzQixJQUFNLE9BQU8sR0FBRztJQUNSLFFBQVEsRUFBRSxHQUFHO0lBQ2IsUUFBUSxFQUFFLGVBQWU7SUFDekIsV0FBVyxFQUFFLHdCQUF3QjtJQUNyQyxVQUFVLEVBQUUsaUJBQWlCO0lBQzdCLFlBQVksRUFBRSxPQUFPO0NBQ3hCLENBQUE7QUFFTCxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUM7S0FDOUMsU0FBUyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQTs7QUN6RXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZnVuY3Rpb24gdHJhbnNsYXRlKCRpbmplY3Rvcikge1xyXG4gICAgdmFyIHBpcFRyYW5zbGF0ZSA9ICRpbmplY3Rvci5oYXMoJ3BpcFRyYW5zbGF0ZScpIFxyXG4gICAgICAgID8gJGluamVjdG9yLmdldCgncGlwVHJhbnNsYXRlJykgOiBudWxsO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHBpcFRyYW5zbGF0ZSAgPyBwaXBUcmFuc2xhdGUudHJhbnNsYXRlKGtleSkgfHwga2V5IDoga2V5O1xyXG4gICAgfVxyXG59XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgncGlwTGlzdC5UcmFuc2xhdGUnLCBbXSlcclxuICAgIC5maWx0ZXIoJ3RyYW5zbGF0ZScsIHRyYW5zbGF0ZSk7XHJcbiIsIu+7v2ltcG9ydCAnLi9kZXBlbmRlbmNpZXMvdHJhbnNsYXRlJztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdwaXBMaXN0cycsIFsgJ3BpcFRhZ0xpc3QnIF0pO1xyXG4iLCJpbnRlcmZhY2UgSVRhZ0xpc3Qge1xyXG4gICAgdGFnczogc3RyaW5nW107XHJcbiAgICB0eXBlOiBzdHJpbmc7XHJcbiAgICB0eXBlTG9jYWw6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgVGFnTGlzdENvbnRyb2xsZXIgaW1wbGVtZW50cyBJVGFnTGlzdCB7XHJcbiAgICBwdWJsaWMgcmViaW5kOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIHRhZ3M6IHN0cmluZ1tdO1xyXG4gICAgcHVibGljIHR5cGU6IHN0cmluZztcclxuICAgIHB1YmxpYyB0eXBlTG9jYWw6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAgJHNjb3BlOiBuZy5JU2NvcGUsIFxyXG4gICAgICAgICAkZWxlbWVudDogbmcuSVJvb3RFbGVtZW50U2VydmljZVxyXG4gICAgKSB7XHJcblxyXG4gICAgICAgIC8vIFNldCB0YWdzXHJcbiAgICAgICAgJGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ3BpcC10YWctbGlzdCcpO1xyXG4gICAgIH1cclxuXHJcbiAgICAgcHJpdmF0ZSB0b0Jvb2xlYW4odmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChfLmlzTnVsbCh2YWx1ZSkgfHwgXy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09ICcxJyB8fCB2YWx1ZSA9PSAndHJ1ZSc7XHJcbiAgICAgfVxyXG5cclxuICAgIHB1YmxpYyAkb25DaGFuZ2VzKGNoYW5nZXM6IFRhZ0xpc3RDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmViaW5kICYmIGNoYW5nZXMudGFncykge1xyXG4gICAgICAgICAgICB0aGlzLnRhZ3MgPSBjaGFuZ2VzLnRhZ3MuY3VycmVudFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVGFnTGlzdEJpbmRpbmdzIHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxuXHJcbiAgICB0YWdzOiBhbnksXHJcbiAgICB0eXBlOiBhbnksXHJcbiAgICB0eXBlTG9jYWw6IGFueSxcclxuICAgIHJlYnVpZDogYW55XHJcbn1cclxuXHJcbmNvbnN0IFRhZ0xpc3RCaW5kaW5nczogSVRhZ0xpc3RCaW5kaW5ncyA9IHtcclxuICAgIHRhZ3M6ICc8cGlwVGFncycsXHJcbiAgICB0eXBlOiAnPHBpcFR5cGUnLFxyXG4gICAgdHlwZUxvY2FsOiAnPHBpcFR5cGVMb2NhbCcsXHJcbiAgICByZWJ1aWQ6ICc8cGlwUmViaW5kJ1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGFnTGlzdENoYW5nZXMgaW1wbGVtZW50cyBuZy5JT25DaGFuZ2VzT2JqZWN0LCBJVGFnTGlzdEJpbmRpbmdzIHtcclxuICAgIFtrZXk6IHN0cmluZ106IG5nLklDaGFuZ2VzT2JqZWN0PGFueT47XHJcbiAgICBcclxuICAgIHRhZ3M6IG5nLklDaGFuZ2VzT2JqZWN0PHN0cmluZ1tdPjtcclxuICAgIHR5cGU6IG5nLklDaGFuZ2VzT2JqZWN0PHN0cmluZz47XHJcbiAgICB0eXBlTG9jYWw6IG5nLklDaGFuZ2VzT2JqZWN0PHN0cmluZz47XHJcbiAgICByZWJ1aWQ6IG5nLklDaGFuZ2VzT2JqZWN0PGJvb2xlYW4+XHJcbn1cclxuXHJcbmNvbnN0IFRhZ0xpc3QgPSB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICBiaW5kaW5nczogVGFnTGlzdEJpbmRpbmdzLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndGFnX2xpc3QvdGFnX2xpc3QuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogVGFnTGlzdENvbnRyb2xsZXIsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnXHJcbiAgICB9XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgncGlwVGFnTGlzdCcsIFsncGlwTGlzdC5UcmFuc2xhdGUnXSlcclxuICAgIC5jb21wb25lbnQoJ3BpcFRhZ0xpc3QnLCBUYWdMaXN0KVxyXG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwTGlzdHMuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBMaXN0cy5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RhZ19saXN0L3RhZ19saXN0Lmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwicGlwLWNoaXAgcm00IHBpcC10eXBlLWNoaXAgcGlwLXR5cGUtY2hpcC1sZWZ0IHt7XFwnYmctXFwnICsgJGN0cmwudHlwZSArIFxcJy1jaGlwc1xcJ319XCJcXG4nICtcbiAgICAnICAgICBuZy1pZj1cIiRjdHJsLnR5cGUgJiYgISRjdHJsLnR5cGVMb2NhbFwiPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDxzcGFuPnt7JGN0cmwudHlwZS50b1VwcGVyQ2FzZSgpIHwgdHJhbnNsYXRlIHwgdXBwZXJjYXNlfX08L3NwYW4+XFxuJyArXG4gICAgJzwvZGl2PlxcbicgK1xuICAgICc8ZGl2IGNsYXNzPVwicGlwLWNoaXAgcm00IHBpcC10eXBlLWNoaXAgcGlwLXR5cGUtY2hpcC1sZWZ0IHt7XFwnYmctXFwnICsgJGN0cmwudHlwZSArIFxcJy1jaGlwc1xcJ319XCJcXG4nICtcbiAgICAnICAgICBuZy1pZj1cIiRjdHJsLnR5cGUgJiYgJGN0cmwudHlwZUxvY2FsXCI+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPHNwYW4+e3skY3RybC50eXBlTG9jYWwudG9VcHBlckNhc2UoKSB8IHRyYW5zbGF0ZSB8IHVwcGVyY2FzZX19PC9zcGFuPlxcbicgK1xuICAgICc8L2Rpdj5cXG4nICtcbiAgICAnPGRpdiBjbGFzcz1cInBpcC1jaGlwIHJtNFwiIG5nLXJlcGVhdD1cInRhZyBpbiAkY3RybC50YWdzXCI+XFxuJyArXG4gICAgJyAgICA8c3Bhbj57ezo6dGFnfX08L3NwYW4+XFxuJyArXG4gICAgJzwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwLXdlYnVpLWxpc3RzLWh0bWwuanMubWFwXG4iXX0="}