{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/dependencies/translate.ts","src/lists.ts","src/tag_list/tag_list.ts","temp/pip-webui-lists-html.js"],"names":[],"mappings":"AAAA;ACAA,CAAC;IACG,YAAY,CAAC;IACb,wBAAwB,SAAwC;QAC5D,IAAI,YAAY,GAAQ,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC;cAC/C,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QAE3C,MAAM,CAAC,UAAC,GAAW;YACf,MAAM,CAAC,YAAY,GAAI,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;QACpE,CAAC,CAAA;IACL,CAAC;IAED,OAAO,CAAC,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC;SAClC,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;AAE7C,CAAC,CAAC,EAAE,CAAC;;;;ACdJ,oCAAkC;AAEnC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,CAAE,YAAY,CAAE,CAAC,CAAC;;;;ACI7C;IAOI,2BACK,MAAiB,EACjB,QAAgC;QAIjC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACjC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IACrC,CAAC;IAEO,qCAAS,GAAjB,UAAkB,KAAa;QAC5B,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAC1D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,MAAM,CAAC;IAC1C,CAAC;IAEK,sCAAU,GAAjB,UAAkB,OAAuB;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;QAC1C,CAAC;IAEL,CAAC;IAEJ,wBAAC;AAAD,CA/BD,AA+BE,IAAA;AAWF,IAAM,eAAe,GAAqB;IACtC,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE,UAAU;IAChB,SAAS,EAAE,eAAe;IAC1B,MAAM,EAAE,YAAY;CACvB,CAAA;AAED;IAAA;IAOA,CAAC;IAAD,qBAAC;AAAD,CAPA,AAOC,IAAA;AAPY,wCAAc;AAS3B,IAAM,OAAO,GAAG;IACR,QAAQ,EAAE,GAAG;IACb,QAAQ,EAAE,eAAe;IACzB,WAAW,EAAE,wBAAwB;IACrC,UAAU,EAAE,iBAAiB;IAC7B,YAAY,EAAE,OAAO;CACxB,CAAA;AAEL,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,mBAAmB,CAAC,CAAC;KAC9C,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;;ACzErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-lists.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(() => {\r\n    'use strict';\r\n    function filerTranslate($injector: angular.auto.IInjectorService) {\r\n        let pipTranslate: any = $injector.has('pipTranslate') \r\n            ? $injector.get('pipTranslate') : null;\r\n\r\n        return (key: string) => {\r\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n        }\r\n    }\r\n\r\n    angular.module('pipList.Translate', [])\r\n        .filter('translate', filerTranslate);\r\n\r\n})();\r\n","ï»¿import './dependencies/translate';\r\n\r\nangular.module('pipLists', [ 'pipTagList' ]);\r\n","interface ITagList {\r\n    tags: string[];\r\n    type: string;\r\n    typeLocal: string;\r\n}\r\n\r\nclass TagListController implements ITagList {\r\n    public rebind: string;\r\n\r\n    public tags: string[];\r\n    public type: string;\r\n    public typeLocal: string;\r\n\r\n    constructor(\r\n         $scope: ng.IScope, \r\n         $element: ng.IRootElementService\r\n    ) {\r\n\r\n        // Set tags\r\n        $element.css('display', 'block');\r\n        $element.addClass('pip-tag-list');\r\n     }\r\n\r\n     private toBoolean(value: string): boolean {\r\n        if (_.isNull(value) || _.isUndefined(value)) return false;\r\n        if (!value) return false;\r\n        value = value.toString().toLowerCase();\r\n        return value == '1' || value == 'true';\r\n     }\r\n\r\n    public $onChanges(changes: TagListChanges) {\r\n        if (this.rebind && changes.tags) {\r\n            this.tags = changes.tags.currentValue;\r\n        }\r\n\r\n    }\r\n\r\n }\r\n\r\nexport interface ITagListBindings {\r\n    [key: string]: any;\r\n\r\n    tags: any,\r\n    type: any,\r\n    typeLocal: any,\r\n    rebuid: any\r\n}\r\n\r\nconst TagListBindings: ITagListBindings = {\r\n    tags: '<pipTags',\r\n    type: '<pipType',\r\n    typeLocal: '<pipTypeLocal',\r\n    rebuid: '<pipRebind'\r\n}\r\n\r\nexport class TagListChanges implements ng.IOnChangesObject, ITagListBindings {\r\n    [key: string]: ng.IChangesObject<any>;\r\n    \r\n    tags: ng.IChangesObject<string[]>;\r\n    type: ng.IChangesObject<string>;\r\n    typeLocal: ng.IChangesObject<string>;\r\n    rebuid: ng.IChangesObject<boolean>\r\n}\r\n\r\nconst TagList = {\r\n        restrict: 'E',\r\n        bindings: TagListBindings,\r\n        templateUrl: 'tag_list/tag_list.html',\r\n        controller: TagListController,\r\n        controllerAs: '$ctrl'\r\n    }\r\n\r\nangular.module('pipTagList', ['pipList.Translate'])\r\n    .component('pipTagList', TagList)\r\n","(function(module) {\ntry {\n  module = angular.module('pipLists.Templates');\n} catch (e) {\n  module = angular.module('pipLists.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('tag_list/tag_list.html',\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + $ctrl.type + \\'-chips\\'}}\"\\n' +\n    '     ng-if=\"$ctrl.type && !$ctrl.typeLocal\">\\n' +\n    '\\n' +\n    '    <span>{{$ctrl.type.toUpperCase() | translate | uppercase}}</span>\\n' +\n    '</div>\\n' +\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + $ctrl.type + \\'-chips\\'}}\"\\n' +\n    '     ng-if=\"$ctrl.type && $ctrl.typeLocal\">\\n' +\n    '\\n' +\n    '    <span>{{$ctrl.typeLocal.toUpperCase() | translate | uppercase}}</span>\\n' +\n    '</div>\\n' +\n    '<div class=\"pip-chip rm4\" ng-repeat=\"tag in $ctrl.tags\">\\n' +\n    '    <span>{{::tag}}</span>\\n' +\n    '</div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-lists-html.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvZGVwZW5kZW5jaWVzL3RyYW5zbGF0ZS50cyIsInNyYy9saXN0cy50cyIsInNyYy90YWdfbGlzdC90YWdfbGlzdC50cyIsInRlbXAvcGlwLXdlYnVpLWxpc3RzLWh0bWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxDQUFDO0lBQ0csWUFBWSxDQUFDO0lBQ2Isd0JBQXdCLFNBQXdDO1FBQzVELElBQUksWUFBWSxHQUFRLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO2NBQy9DLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRTNDLE1BQU0sQ0FBQyxVQUFDLEdBQVc7WUFDZixNQUFNLENBQUMsWUFBWSxHQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNwRSxDQUFDLENBQUE7SUFDTCxDQUFDO0lBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUM7U0FDbEMsTUFBTSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUU3QyxDQUFDLENBQUMsRUFBRSxDQUFDOzs7O0FDZEosb0NBQWtDO0FBRW5DLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUUsWUFBWSxDQUFFLENBQUMsQ0FBQzs7OztBQ0k3QztJQU9JLDJCQUNLLE1BQWlCLEVBQ2pCLFFBQWdDO1FBSWpDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLFFBQVEsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVPLHFDQUFTLEdBQWpCLFVBQWtCLEtBQWE7UUFDNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUMxRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDekIsS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN2QyxNQUFNLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDO0lBQzFDLENBQUM7SUFFSyxzQ0FBVSxHQUFqQixVQUFrQixPQUF1QjtRQUNyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDMUMsQ0FBQztJQUVMLENBQUM7SUFFSix3QkFBQztBQUFELENBL0JELEFBK0JFLElBQUE7QUFXRixJQUFNLGVBQWUsR0FBcUI7SUFDdEMsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBSSxFQUFFLFVBQVU7SUFDaEIsU0FBUyxFQUFFLGVBQWU7SUFDMUIsTUFBTSxFQUFFLFlBQVk7Q0FDdkIsQ0FBQTtBQUVEO0lBQUE7SUFPQSxDQUFDO0lBQUQscUJBQUM7QUFBRCxDQVBBLEFBT0MsSUFBQTtBQVBZLHdDQUFjO0FBUzNCLElBQU0sT0FBTyxHQUFHO0lBQ1IsUUFBUSxFQUFFLEdBQUc7SUFDYixRQUFRLEVBQUUsZUFBZTtJQUN6QixXQUFXLEVBQUUsd0JBQXdCO0lBQ3JDLFVBQVUsRUFBRSxpQkFBaUI7SUFDN0IsWUFBWSxFQUFFLE9BQU87Q0FDeEIsQ0FBQTtBQUVMLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQztLQUM5QyxTQUFTLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFBOztBQ3pFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoKCkgPT4ge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgZnVuY3Rpb24gZmlsZXJUcmFuc2xhdGUoJGluamVjdG9yOiBhbmd1bGFyLmF1dG8uSUluamVjdG9yU2VydmljZSkge1xyXG4gICAgICAgIGxldCBwaXBUcmFuc2xhdGU6IGFueSA9ICRpbmplY3Rvci5oYXMoJ3BpcFRyYW5zbGF0ZScpIFxyXG4gICAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoJ3BpcFRyYW5zbGF0ZScpIDogbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcGlwVHJhbnNsYXRlICA/IHBpcFRyYW5zbGF0ZS50cmFuc2xhdGUoa2V5KSB8fCBrZXkgOiBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdwaXBMaXN0LlRyYW5zbGF0ZScsIFtdKVxyXG4gICAgICAgIC5maWx0ZXIoJ3RyYW5zbGF0ZScsIGZpbGVyVHJhbnNsYXRlKTtcclxuXHJcbn0pKCk7XHJcbiIsIu+7v2ltcG9ydCAnLi9kZXBlbmRlbmNpZXMvdHJhbnNsYXRlJztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdwaXBMaXN0cycsIFsgJ3BpcFRhZ0xpc3QnIF0pO1xyXG4iLCJpbnRlcmZhY2UgSVRhZ0xpc3Qge1xyXG4gICAgdGFnczogc3RyaW5nW107XHJcbiAgICB0eXBlOiBzdHJpbmc7XHJcbiAgICB0eXBlTG9jYWw6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgVGFnTGlzdENvbnRyb2xsZXIgaW1wbGVtZW50cyBJVGFnTGlzdCB7XHJcbiAgICBwdWJsaWMgcmViaW5kOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIHRhZ3M6IHN0cmluZ1tdO1xyXG4gICAgcHVibGljIHR5cGU6IHN0cmluZztcclxuICAgIHB1YmxpYyB0eXBlTG9jYWw6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAgJHNjb3BlOiBuZy5JU2NvcGUsIFxyXG4gICAgICAgICAkZWxlbWVudDogbmcuSVJvb3RFbGVtZW50U2VydmljZVxyXG4gICAgKSB7XHJcblxyXG4gICAgICAgIC8vIFNldCB0YWdzXHJcbiAgICAgICAgJGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ3BpcC10YWctbGlzdCcpO1xyXG4gICAgIH1cclxuXHJcbiAgICAgcHJpdmF0ZSB0b0Jvb2xlYW4odmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChfLmlzTnVsbCh2YWx1ZSkgfHwgXy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09ICcxJyB8fCB2YWx1ZSA9PSAndHJ1ZSc7XHJcbiAgICAgfVxyXG5cclxuICAgIHB1YmxpYyAkb25DaGFuZ2VzKGNoYW5nZXM6IFRhZ0xpc3RDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmViaW5kICYmIGNoYW5nZXMudGFncykge1xyXG4gICAgICAgICAgICB0aGlzLnRhZ3MgPSBjaGFuZ2VzLnRhZ3MuY3VycmVudFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVGFnTGlzdEJpbmRpbmdzIHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxuXHJcbiAgICB0YWdzOiBhbnksXHJcbiAgICB0eXBlOiBhbnksXHJcbiAgICB0eXBlTG9jYWw6IGFueSxcclxuICAgIHJlYnVpZDogYW55XHJcbn1cclxuXHJcbmNvbnN0IFRhZ0xpc3RCaW5kaW5nczogSVRhZ0xpc3RCaW5kaW5ncyA9IHtcclxuICAgIHRhZ3M6ICc8cGlwVGFncycsXHJcbiAgICB0eXBlOiAnPHBpcFR5cGUnLFxyXG4gICAgdHlwZUxvY2FsOiAnPHBpcFR5cGVMb2NhbCcsXHJcbiAgICByZWJ1aWQ6ICc8cGlwUmViaW5kJ1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGFnTGlzdENoYW5nZXMgaW1wbGVtZW50cyBuZy5JT25DaGFuZ2VzT2JqZWN0LCBJVGFnTGlzdEJpbmRpbmdzIHtcclxuICAgIFtrZXk6IHN0cmluZ106IG5nLklDaGFuZ2VzT2JqZWN0PGFueT47XHJcbiAgICBcclxuICAgIHRhZ3M6IG5nLklDaGFuZ2VzT2JqZWN0PHN0cmluZ1tdPjtcclxuICAgIHR5cGU6IG5nLklDaGFuZ2VzT2JqZWN0PHN0cmluZz47XHJcbiAgICB0eXBlTG9jYWw6IG5nLklDaGFuZ2VzT2JqZWN0PHN0cmluZz47XHJcbiAgICByZWJ1aWQ6IG5nLklDaGFuZ2VzT2JqZWN0PGJvb2xlYW4+XHJcbn1cclxuXHJcbmNvbnN0IFRhZ0xpc3QgPSB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICBiaW5kaW5nczogVGFnTGlzdEJpbmRpbmdzLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndGFnX2xpc3QvdGFnX2xpc3QuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogVGFnTGlzdENvbnRyb2xsZXIsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnXHJcbiAgICB9XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgncGlwVGFnTGlzdCcsIFsncGlwTGlzdC5UcmFuc2xhdGUnXSlcclxuICAgIC5jb21wb25lbnQoJ3BpcFRhZ0xpc3QnLCBUYWdMaXN0KVxyXG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwTGlzdHMuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBMaXN0cy5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RhZ19saXN0L3RhZ19saXN0Lmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwicGlwLWNoaXAgcm00IHBpcC10eXBlLWNoaXAgcGlwLXR5cGUtY2hpcC1sZWZ0IHt7XFwnYmctXFwnICsgJGN0cmwudHlwZSArIFxcJy1jaGlwc1xcJ319XCJcXG4nICtcbiAgICAnICAgICBuZy1pZj1cIiRjdHJsLnR5cGUgJiYgISRjdHJsLnR5cGVMb2NhbFwiPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDxzcGFuPnt7JGN0cmwudHlwZS50b1VwcGVyQ2FzZSgpIHwgdHJhbnNsYXRlIHwgdXBwZXJjYXNlfX08L3NwYW4+XFxuJyArXG4gICAgJzwvZGl2PlxcbicgK1xuICAgICc8ZGl2IGNsYXNzPVwicGlwLWNoaXAgcm00IHBpcC10eXBlLWNoaXAgcGlwLXR5cGUtY2hpcC1sZWZ0IHt7XFwnYmctXFwnICsgJGN0cmwudHlwZSArIFxcJy1jaGlwc1xcJ319XCJcXG4nICtcbiAgICAnICAgICBuZy1pZj1cIiRjdHJsLnR5cGUgJiYgJGN0cmwudHlwZUxvY2FsXCI+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPHNwYW4+e3skY3RybC50eXBlTG9jYWwudG9VcHBlckNhc2UoKSB8IHRyYW5zbGF0ZSB8IHVwcGVyY2FzZX19PC9zcGFuPlxcbicgK1xuICAgICc8L2Rpdj5cXG4nICtcbiAgICAnPGRpdiBjbGFzcz1cInBpcC1jaGlwIHJtNFwiIG5nLXJlcGVhdD1cInRhZyBpbiAkY3RybC50YWdzXCI+XFxuJyArXG4gICAgJyAgICA8c3Bhbj57ezo6dGFnfX08L3NwYW4+XFxuJyArXG4gICAgJzwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwLXdlYnVpLWxpc3RzLWh0bWwuanMubWFwXG4iXX0="}