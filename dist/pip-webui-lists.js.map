{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/dependencies/TranslateFilter.ts","src/index.ts","src/tag_list/TagList.ts","temp/pip-webui-lists-html.js"],"names":[],"mappings":"AAAA;ACAA,CAAC;IAEG,mBAAmB,SAAwC;QACvD,IAAI,YAAY,GAAQ,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC;cAC/C,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QAE3C,MAAM,CAAC,UAAC,GAAW;YACf,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;QACnE,CAAC,CAAA;IACL,CAAC;IAED,OAAO;SACF,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC;SAC/B,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAExC,CAAC;;;;;ACfA,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,CAAE,YAAY,CAAE,CAAC,CAAC;AAE9C,0CAAwC;AACxC,8BAA4B;;;ACH5B,CAAC;IAOG;QAOI,2BACI,MAAiB,EACjB,QAAgC;YAIhC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACjC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACtC,CAAC;QAEO,qCAAS,GAAjB,UAAkB,KAAa;YAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAC1D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YACzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,MAAM,CAAC;QAC3C,CAAC;QAEM,sCAAU,GAAjB,UAAkB,OAAuB;YACrC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;YAC1C,CAAC;QAEL,CAAC;QAEL,wBAAC;IAAD,CA/BA,AA+BC,IAAA;IAWD,IAAM,eAAe,GAAqB;QACtC,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,eAAe;QAC1B,MAAM,EAAE,YAAY;KACvB,CAAA;IAED;QAAA;QAOA,CAAC;QAAD,qBAAC;IAAD,CAPA,AAOC,IAAA;IAED,IAAM,OAAO,GAAG;QACZ,QAAQ,EAAE,eAAe;QACzB,WAAW,EAAE,uBAAuB;QACpC,UAAU,EAAE,iBAAiB;KAChC,CAAA;IAED,OAAO;SACF,MAAM,CAAC,YAAY,EAAE,CAAC,mBAAmB,CAAC,CAAC;SAC3C,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;AAEzC,CAAC;;;AC3ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-lists.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","{\n\n    function translate($injector: angular.auto.IInjectorService) {\n        let pipTranslate: any = $injector.has('pipTranslate')\n            ? $injector.get('pipTranslate') : null;\n\n        return (key: string) => {\n            return pipTranslate ? pipTranslate.translate(key) || key : key;\n        }\n    }\n\n    angular\n        .module('pipList.Translate', [])\n        .filter('translate', translate);\n\n}","ï»¿angular.module('pipLists', [ 'pipTagList' ]);\n\nimport './dependencies/TranslateFilter';\nimport './tag_list/TagList';\n","{\n    interface ITagList {\n        tags: string[];\n        type: string;\n        typeLocal: string;\n    }\n\n    class TagListController implements ITagList {\n        public rebind: string;\n\n        public tags: string[];\n        public type: string;\n        public typeLocal: string;\n\n        constructor(\n            $scope: ng.IScope,\n            $element: ng.IRootElementService\n        ) {\n\n            // Set tags\n            $element.css('display', 'block');\n            $element.addClass('pip-tag-list');\n        }\n\n        private toBoolean(value: string): boolean {\n            if (_.isNull(value) || _.isUndefined(value)) return false;\n            if (!value) return false;\n            value = value.toString().toLowerCase();\n            return value == '1' || value == 'true';\n        }\n\n        public $onChanges(changes: TagListChanges) {\n            if (this.rebind && changes.tags) {\n                this.tags = changes.tags.currentValue;\n            }\n\n        }\n\n    }\n\n    interface ITagListBindings {\n        [key: string]: any;\n\n        tags: any,\n        type: any,\n        typeLocal: any,\n        rebuid: any\n    }\n\n    const TagListBindings: ITagListBindings = {\n        tags: '<pipTags',\n        type: '<pipType',\n        typeLocal: '<pipTypeLocal',\n        rebuid: '<pipRebind'\n    }\n\n    class TagListChanges implements ng.IOnChangesObject, ITagListBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        tags: ng.IChangesObject<string[]>;\n        type: ng.IChangesObject<string>;\n        typeLocal: ng.IChangesObject<string>;\n        rebuid: ng.IChangesObject<boolean>\n    }\n\n    const TagList = {\n        bindings: TagListBindings,\n        templateUrl: 'tag_list/TagList.html',\n        controller: TagListController\n    }\n\n    angular\n        .module('pipTagList', ['pipList.Translate'])\n        .component('pipTagList', TagList)\n\n}","(function(module) {\ntry {\n  module = angular.module('pipLists.Templates');\n} catch (e) {\n  module = angular.module('pipLists.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('tag_list/TagList.html',\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + $ctrl.type + \\'-chips\\'}}\"\\n' +\n    '     ng-if=\"$ctrl.type && !$ctrl.typeLocal\">\\n' +\n    '\\n' +\n    '    <span>{{$ctrl.type.toUpperCase() | translate | uppercase}}</span>\\n' +\n    '</div>\\n' +\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + $ctrl.type + \\'-chips\\'}}\"\\n' +\n    '     ng-if=\"$ctrl.type && $ctrl.typeLocal\">\\n' +\n    '\\n' +\n    '    <span>{{$ctrl.typeLocal.toUpperCase() | translate | uppercase}}</span>\\n' +\n    '</div>\\n' +\n    '<div class=\"pip-chip rm4\" ng-repeat=\"tag in $ctrl.tags\">\\n' +\n    '    <span>{{::tag}}</span>\\n' +\n    '</div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-lists-html.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvZGVwZW5kZW5jaWVzL1RyYW5zbGF0ZUZpbHRlci50cyIsInNyYy9pbmRleC50cyIsInNyYy90YWdfbGlzdC9UYWdMaXN0LnRzIiwidGVtcC9waXAtd2VidWktbGlzdHMtaHRtbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLENBQUM7SUFFRyxtQkFBbUIsU0FBd0M7UUFDdkQsSUFBSSxZQUFZLEdBQVEsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7Y0FDL0MsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUM7UUFFM0MsTUFBTSxDQUFDLFVBQUMsR0FBVztZQUNmLE1BQU0sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ25FLENBQUMsQ0FBQTtJQUNMLENBQUM7SUFFRCxPQUFPO1NBQ0YsTUFBTSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQztTQUMvQixNQUFNLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRXhDLENBQUM7Ozs7O0FDZkEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBRSxZQUFZLENBQUUsQ0FBQyxDQUFDO0FBRTlDLDBDQUF3QztBQUN4Qyw4QkFBNEI7OztBQ0g1QixDQUFDO0lBT0c7UUFPSSwyQkFDSSxNQUFpQixFQUNqQixRQUFnQztZQUloQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNqQyxRQUFRLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFFTyxxQ0FBUyxHQUFqQixVQUFrQixLQUFhO1lBQzNCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzFELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDekIsS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QyxNQUFNLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDO1FBQzNDLENBQUM7UUFFTSxzQ0FBVSxHQUFqQixVQUFrQixPQUF1QjtZQUNyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQzFDLENBQUM7UUFFTCxDQUFDO1FBRUwsd0JBQUM7SUFBRCxDQS9CQSxBQStCQyxJQUFBO0lBV0QsSUFBTSxlQUFlLEdBQXFCO1FBQ3RDLElBQUksRUFBRSxVQUFVO1FBQ2hCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFNBQVMsRUFBRSxlQUFlO1FBQzFCLE1BQU0sRUFBRSxZQUFZO0tBQ3ZCLENBQUE7SUFFRDtRQUFBO1FBT0EsQ0FBQztRQUFELHFCQUFDO0lBQUQsQ0FQQSxBQU9DLElBQUE7SUFFRCxJQUFNLE9BQU8sR0FBRztRQUNaLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLFdBQVcsRUFBRSx1QkFBdUI7UUFDcEMsVUFBVSxFQUFFLGlCQUFpQjtLQUNoQyxDQUFBO0lBRUQsT0FBTztTQUNGLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQzNDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFFekMsQ0FBQzs7O0FDM0VEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwie1xuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKCRpbmplY3RvcjogYW5ndWxhci5hdXRvLklJbmplY3RvclNlcnZpY2UpIHtcbiAgICAgICAgbGV0IHBpcFRyYW5zbGF0ZTogYW55ID0gJGluamVjdG9yLmhhcygncGlwVHJhbnNsYXRlJylcbiAgICAgICAgICAgID8gJGluamVjdG9yLmdldCgncGlwVHJhbnNsYXRlJykgOiBudWxsO1xuXG4gICAgICAgIHJldHVybiAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwaXBUcmFuc2xhdGUgPyBwaXBUcmFuc2xhdGUudHJhbnNsYXRlKGtleSkgfHwga2V5IDoga2V5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdwaXBMaXN0LlRyYW5zbGF0ZScsIFtdKVxuICAgICAgICAuZmlsdGVyKCd0cmFuc2xhdGUnLCB0cmFuc2xhdGUpO1xuXG59Iiwi77u/YW5ndWxhci5tb2R1bGUoJ3BpcExpc3RzJywgWyAncGlwVGFnTGlzdCcgXSk7XG5cbmltcG9ydCAnLi9kZXBlbmRlbmNpZXMvVHJhbnNsYXRlRmlsdGVyJztcbmltcG9ydCAnLi90YWdfbGlzdC9UYWdMaXN0JztcbiIsIntcbiAgICBpbnRlcmZhY2UgSVRhZ0xpc3Qge1xuICAgICAgICB0YWdzOiBzdHJpbmdbXTtcbiAgICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgICB0eXBlTG9jYWw6IHN0cmluZztcbiAgICB9XG5cbiAgICBjbGFzcyBUYWdMaXN0Q29udHJvbGxlciBpbXBsZW1lbnRzIElUYWdMaXN0IHtcbiAgICAgICAgcHVibGljIHJlYmluZDogc3RyaW5nO1xuXG4gICAgICAgIHB1YmxpYyB0YWdzOiBzdHJpbmdbXTtcbiAgICAgICAgcHVibGljIHR5cGU6IHN0cmluZztcbiAgICAgICAgcHVibGljIHR5cGVMb2NhbDogc3RyaW5nO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICAgICAgJHNjb3BlOiBuZy5JU2NvcGUsXG4gICAgICAgICAgICAkZWxlbWVudDogbmcuSVJvb3RFbGVtZW50U2VydmljZVxuICAgICAgICApIHtcblxuICAgICAgICAgICAgLy8gU2V0IHRhZ3NcbiAgICAgICAgICAgICRlbGVtZW50LmNzcygnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ3BpcC10YWctbGlzdCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSB0b0Jvb2xlYW4odmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgaWYgKF8uaXNOdWxsKHZhbHVlKSB8fCBfLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gJzEnIHx8IHZhbHVlID09ICd0cnVlJztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyAkb25DaGFuZ2VzKGNoYW5nZXM6IFRhZ0xpc3RDaGFuZ2VzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWJpbmQgJiYgY2hhbmdlcy50YWdzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzID0gY2hhbmdlcy50YWdzLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBpbnRlcmZhY2UgSVRhZ0xpc3RCaW5kaW5ncyB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcblxuICAgICAgICB0YWdzOiBhbnksXG4gICAgICAgIHR5cGU6IGFueSxcbiAgICAgICAgdHlwZUxvY2FsOiBhbnksXG4gICAgICAgIHJlYnVpZDogYW55XG4gICAgfVxuXG4gICAgY29uc3QgVGFnTGlzdEJpbmRpbmdzOiBJVGFnTGlzdEJpbmRpbmdzID0ge1xuICAgICAgICB0YWdzOiAnPHBpcFRhZ3MnLFxuICAgICAgICB0eXBlOiAnPHBpcFR5cGUnLFxuICAgICAgICB0eXBlTG9jYWw6ICc8cGlwVHlwZUxvY2FsJyxcbiAgICAgICAgcmVidWlkOiAnPHBpcFJlYmluZCdcbiAgICB9XG5cbiAgICBjbGFzcyBUYWdMaXN0Q2hhbmdlcyBpbXBsZW1lbnRzIG5nLklPbkNoYW5nZXNPYmplY3QsIElUYWdMaXN0QmluZGluZ3Mge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBuZy5JQ2hhbmdlc09iamVjdDxhbnk+O1xuXG4gICAgICAgIHRhZ3M6IG5nLklDaGFuZ2VzT2JqZWN0PHN0cmluZ1tdPjtcbiAgICAgICAgdHlwZTogbmcuSUNoYW5nZXNPYmplY3Q8c3RyaW5nPjtcbiAgICAgICAgdHlwZUxvY2FsOiBuZy5JQ2hhbmdlc09iamVjdDxzdHJpbmc+O1xuICAgICAgICByZWJ1aWQ6IG5nLklDaGFuZ2VzT2JqZWN0PGJvb2xlYW4+XG4gICAgfVxuXG4gICAgY29uc3QgVGFnTGlzdCA9IHtcbiAgICAgICAgYmluZGluZ3M6IFRhZ0xpc3RCaW5kaW5ncyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0YWdfbGlzdC9UYWdMaXN0Lmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiBUYWdMaXN0Q29udHJvbGxlclxuICAgIH1cblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgncGlwVGFnTGlzdCcsIFsncGlwTGlzdC5UcmFuc2xhdGUnXSlcbiAgICAgICAgLmNvbXBvbmVudCgncGlwVGFnTGlzdCcsIFRhZ0xpc3QpXG5cbn0iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwTGlzdHMuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBMaXN0cy5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RhZ19saXN0L1RhZ0xpc3QuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJwaXAtY2hpcCBybTQgcGlwLXR5cGUtY2hpcCBwaXAtdHlwZS1jaGlwLWxlZnQge3tcXCdiZy1cXCcgKyAkY3RybC50eXBlICsgXFwnLWNoaXBzXFwnfX1cIlxcbicgK1xuICAgICcgICAgIG5nLWlmPVwiJGN0cmwudHlwZSAmJiAhJGN0cmwudHlwZUxvY2FsXCI+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPHNwYW4+e3skY3RybC50eXBlLnRvVXBwZXJDYXNlKCkgfCB0cmFuc2xhdGUgfCB1cHBlcmNhc2V9fTwvc3Bhbj5cXG4nICtcbiAgICAnPC9kaXY+XFxuJyArXG4gICAgJzxkaXYgY2xhc3M9XCJwaXAtY2hpcCBybTQgcGlwLXR5cGUtY2hpcCBwaXAtdHlwZS1jaGlwLWxlZnQge3tcXCdiZy1cXCcgKyAkY3RybC50eXBlICsgXFwnLWNoaXBzXFwnfX1cIlxcbicgK1xuICAgICcgICAgIG5nLWlmPVwiJGN0cmwudHlwZSAmJiAkY3RybC50eXBlTG9jYWxcIj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICA8c3Bhbj57eyRjdHJsLnR5cGVMb2NhbC50b1VwcGVyQ2FzZSgpIHwgdHJhbnNsYXRlIHwgdXBwZXJjYXNlfX08L3NwYW4+XFxuJyArXG4gICAgJzwvZGl2PlxcbicgK1xuICAgICc8ZGl2IGNsYXNzPVwicGlwLWNoaXAgcm00XCIgbmctcmVwZWF0PVwidGFnIGluICRjdHJsLnRhZ3NcIj5cXG4nICtcbiAgICAnICAgIDxzcGFuPnt7Ojp0YWd9fTwvc3Bhbj5cXG4nICtcbiAgICAnPC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXAtd2VidWktbGlzdHMtaHRtbC5qcy5tYXBcbiJdfQ=="}