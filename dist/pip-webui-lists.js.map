{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/dependencies/translate.ts","src/lists.ts","src/tag_list/tag_list.ts","temp/pip-webui-lists-html.js"],"names":[],"mappings":"AAAA;ACAA,CAAC;IAED,mBAAmB,SAAwC;QACvD,IAAI,YAAY,GAAQ,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC;cAC/C,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QAE3C,MAAM,CAAC,UAAC,GAAW;YACf,MAAM,CAAC,YAAY,GAAI,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;QACpE,CAAC,CAAA;IACL,CAAC;IAED,OAAO;SACF,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC;SAC/B,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAEpC,CAAC,CAAC,EAAE,CAAC;;;;ACfJ,oCAAkC;AAEnC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,CAAE,YAAY,CAAE,CAAC,CAAC;;ACD7C,CAAC;IAOG;QAOI,2BACI,MAAiB,EACjB,QAAgC;YAIhC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACjC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACtC,CAAC;QAEO,qCAAS,GAAjB,UAAkB,KAAa;YAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAC1D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YACzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,MAAM,CAAC;QAC3C,CAAC;QAEM,sCAAU,GAAjB,UAAkB,OAAuB;YACrC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;YAC1C,CAAC;QAEL,CAAC;QAEL,wBAAC;IAAD,CA/BA,AA+BC,IAAA;IAWD,IAAM,eAAe,GAAqB;QACtC,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,eAAe;QAC1B,MAAM,EAAE,YAAY;KACvB,CAAA;IAED;QAAA;QAOA,CAAC;QAAD,qBAAC;IAAD,CAPA,AAOC,IAAA;IAED,IAAM,OAAO,GAAG;QACZ,QAAQ,EAAE,eAAe;QACzB,WAAW,EAAE,wBAAwB;QACrC,UAAU,EAAE,iBAAiB;KAChC,CAAA;IAED,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,mBAAmB,CAAC,CAAC;SAC9C,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;AAEzC,CAAC,CAAC,EAAE,CAAC;;AC3EL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-lists.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(() => {\r\n\r\nfunction translate($injector: angular.auto.IInjectorService) {\r\n    let pipTranslate: any = $injector.has('pipTranslate') \r\n        ? $injector.get('pipTranslate') : null;\r\n\r\n    return (key: string) => {\r\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipList.Translate', [])\r\n    .filter('translate', translate);\r\n\r\n})();\r\n","ï»¿import './dependencies/translate';\r\n\r\nangular.module('pipLists', [ 'pipTagList' ]);\r\n","\r\n(() => {\r\n    interface ITagList {\r\n        tags: string[];\r\n        type: string;\r\n        typeLocal: string;\r\n    }\r\n\r\n    class TagListController implements ITagList {\r\n        public rebind: string;\r\n\r\n        public tags: string[];\r\n        public type: string;\r\n        public typeLocal: string;\r\n\r\n        constructor(\r\n            $scope: ng.IScope, \r\n            $element: ng.IRootElementService\r\n        ) {\r\n\r\n            // Set tags\r\n            $element.css('display', 'block');\r\n            $element.addClass('pip-tag-list');\r\n        }\r\n\r\n        private toBoolean(value: string): boolean {\r\n            if (_.isNull(value) || _.isUndefined(value)) return false;\r\n            if (!value) return false;\r\n            value = value.toString().toLowerCase();\r\n            return value == '1' || value == 'true';\r\n        }\r\n\r\n        public $onChanges(changes: TagListChanges) {\r\n            if (this.rebind && changes.tags) {\r\n                this.tags = changes.tags.currentValue;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    interface ITagListBindings {\r\n        [key: string]: any;\r\n\r\n        tags: any,\r\n        type: any,\r\n        typeLocal: any,\r\n        rebuid: any\r\n    }\r\n\r\n    const TagListBindings: ITagListBindings = {\r\n        tags: '<pipTags',\r\n        type: '<pipType',\r\n        typeLocal: '<pipTypeLocal',\r\n        rebuid: '<pipRebind'\r\n    }\r\n\r\n    class TagListChanges implements ng.IOnChangesObject, ITagListBindings {\r\n        [key: string]: ng.IChangesObject<any>;\r\n        \r\n        tags: ng.IChangesObject<string[]>;\r\n        type: ng.IChangesObject<string>;\r\n        typeLocal: ng.IChangesObject<string>;\r\n        rebuid: ng.IChangesObject<boolean>\r\n    }\r\n\r\n    const TagList = {\r\n        bindings: TagListBindings,\r\n        templateUrl: 'tag_list/tag_list.html',\r\n        controller: TagListController\r\n    }\r\n\r\n    angular.module('pipTagList', ['pipList.Translate'])\r\n        .component('pipTagList', TagList)\r\n\r\n})();","(function(module) {\ntry {\n  module = angular.module('pipLists.Templates');\n} catch (e) {\n  module = angular.module('pipLists.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('tag_list/tag_list.html',\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + $ctrl.type + \\'-chips\\'}}\"\\n' +\n    '     ng-if=\"$ctrl.type && !$ctrl.typeLocal\">\\n' +\n    '\\n' +\n    '    <span>{{$ctrl.type.toUpperCase() | translate | uppercase}}</span>\\n' +\n    '</div>\\n' +\n    '<div class=\"pip-chip rm4 pip-type-chip pip-type-chip-left {{\\'bg-\\' + $ctrl.type + \\'-chips\\'}}\"\\n' +\n    '     ng-if=\"$ctrl.type && $ctrl.typeLocal\">\\n' +\n    '\\n' +\n    '    <span>{{$ctrl.typeLocal.toUpperCase() | translate | uppercase}}</span>\\n' +\n    '</div>\\n' +\n    '<div class=\"pip-chip rm4\" ng-repeat=\"tag in $ctrl.tags\">\\n' +\n    '    <span>{{::tag}}</span>\\n' +\n    '</div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-lists-html.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvZGVwZW5kZW5jaWVzL3RyYW5zbGF0ZS50cyIsInNyYy9saXN0cy50cyIsInNyYy90YWdfbGlzdC90YWdfbGlzdC50cyIsInRlbXAvcGlwLXdlYnVpLWxpc3RzLWh0bWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxDQUFDO0lBRUQsbUJBQW1CLFNBQXdDO1FBQ3ZELElBQUksWUFBWSxHQUFRLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO2NBQy9DLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRTNDLE1BQU0sQ0FBQyxVQUFDLEdBQVc7WUFDZixNQUFNLENBQUMsWUFBWSxHQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNwRSxDQUFDLENBQUE7SUFDTCxDQUFDO0lBRUQsT0FBTztTQUNGLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUM7U0FDL0IsTUFBTSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUVwQyxDQUFDLENBQUMsRUFBRSxDQUFDOzs7O0FDZkosb0NBQWtDO0FBRW5DLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUUsWUFBWSxDQUFFLENBQUMsQ0FBQzs7QUNEN0MsQ0FBQztJQU9HO1FBT0ksMkJBQ0ksTUFBaUIsRUFDakIsUUFBZ0M7WUFJaEMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDakMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBRU8scUNBQVMsR0FBakIsVUFBa0IsS0FBYTtZQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUMxRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ3pCLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdkMsTUFBTSxDQUFDLEtBQUssSUFBSSxHQUFHLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQztRQUMzQyxDQUFDO1FBRU0sc0NBQVUsR0FBakIsVUFBa0IsT0FBdUI7WUFDckMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUMxQyxDQUFDO1FBRUwsQ0FBQztRQUVMLHdCQUFDO0lBQUQsQ0EvQkEsQUErQkMsSUFBQTtJQVdELElBQU0sZUFBZSxHQUFxQjtRQUN0QyxJQUFJLEVBQUUsVUFBVTtRQUNoQixJQUFJLEVBQUUsVUFBVTtRQUNoQixTQUFTLEVBQUUsZUFBZTtRQUMxQixNQUFNLEVBQUUsWUFBWTtLQUN2QixDQUFBO0lBRUQ7UUFBQTtRQU9BLENBQUM7UUFBRCxxQkFBQztJQUFELENBUEEsQUFPQyxJQUFBO0lBRUQsSUFBTSxPQUFPLEdBQUc7UUFDWixRQUFRLEVBQUUsZUFBZTtRQUN6QixXQUFXLEVBQUUsd0JBQXdCO1FBQ3JDLFVBQVUsRUFBRSxpQkFBaUI7S0FDaEMsQ0FBQTtJQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUM5QyxTQUFTLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBRXpDLENBQUMsQ0FBQyxFQUFFLENBQUM7O0FDM0VMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiKCgpID0+IHtcclxuXHJcbmZ1bmN0aW9uIHRyYW5zbGF0ZSgkaW5qZWN0b3I6IGFuZ3VsYXIuYXV0by5JSW5qZWN0b3JTZXJ2aWNlKSB7XHJcbiAgICBsZXQgcGlwVHJhbnNsYXRlOiBhbnkgPSAkaW5qZWN0b3IuaGFzKCdwaXBUcmFuc2xhdGUnKSBcclxuICAgICAgICA/ICRpbmplY3Rvci5nZXQoJ3BpcFRyYW5zbGF0ZScpIDogbnVsbDtcclxuXHJcbiAgICByZXR1cm4gKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHBpcFRyYW5zbGF0ZSAgPyBwaXBUcmFuc2xhdGUudHJhbnNsYXRlKGtleSkgfHwga2V5IDoga2V5O1xyXG4gICAgfVxyXG59XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwaXBMaXN0LlRyYW5zbGF0ZScsIFtdKVxyXG4gICAgLmZpbHRlcigndHJhbnNsYXRlJywgdHJhbnNsYXRlKTtcclxuXHJcbn0pKCk7XHJcbiIsIu+7v2ltcG9ydCAnLi9kZXBlbmRlbmNpZXMvdHJhbnNsYXRlJztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdwaXBMaXN0cycsIFsgJ3BpcFRhZ0xpc3QnIF0pO1xyXG4iLCJcclxuKCgpID0+IHtcclxuICAgIGludGVyZmFjZSBJVGFnTGlzdCB7XHJcbiAgICAgICAgdGFnczogc3RyaW5nW107XHJcbiAgICAgICAgdHlwZTogc3RyaW5nO1xyXG4gICAgICAgIHR5cGVMb2NhbDogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGNsYXNzIFRhZ0xpc3RDb250cm9sbGVyIGltcGxlbWVudHMgSVRhZ0xpc3Qge1xyXG4gICAgICAgIHB1YmxpYyByZWJpbmQ6IHN0cmluZztcclxuXHJcbiAgICAgICAgcHVibGljIHRhZ3M6IHN0cmluZ1tdO1xyXG4gICAgICAgIHB1YmxpYyB0eXBlOiBzdHJpbmc7XHJcbiAgICAgICAgcHVibGljIHR5cGVMb2NhbDogc3RyaW5nO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAgICAgJHNjb3BlOiBuZy5JU2NvcGUsIFxyXG4gICAgICAgICAgICAkZWxlbWVudDogbmcuSVJvb3RFbGVtZW50U2VydmljZVxyXG4gICAgICAgICkge1xyXG5cclxuICAgICAgICAgICAgLy8gU2V0IHRhZ3NcclxuICAgICAgICAgICAgJGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgICRlbGVtZW50LmFkZENsYXNzKCdwaXAtdGFnLWxpc3QnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdG9Cb29sZWFuKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgaWYgKF8uaXNOdWxsKHZhbHVlKSB8fCBfLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gJzEnIHx8IHZhbHVlID09ICd0cnVlJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyAkb25DaGFuZ2VzKGNoYW5nZXM6IFRhZ0xpc3RDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlYmluZCAmJiBjaGFuZ2VzLnRhZ3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFncyA9IGNoYW5nZXMudGFncy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgSVRhZ0xpc3RCaW5kaW5ncyB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xyXG5cclxuICAgICAgICB0YWdzOiBhbnksXHJcbiAgICAgICAgdHlwZTogYW55LFxyXG4gICAgICAgIHR5cGVMb2NhbDogYW55LFxyXG4gICAgICAgIHJlYnVpZDogYW55XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgVGFnTGlzdEJpbmRpbmdzOiBJVGFnTGlzdEJpbmRpbmdzID0ge1xyXG4gICAgICAgIHRhZ3M6ICc8cGlwVGFncycsXHJcbiAgICAgICAgdHlwZTogJzxwaXBUeXBlJyxcclxuICAgICAgICB0eXBlTG9jYWw6ICc8cGlwVHlwZUxvY2FsJyxcclxuICAgICAgICByZWJ1aWQ6ICc8cGlwUmViaW5kJ1xyXG4gICAgfVxyXG5cclxuICAgIGNsYXNzIFRhZ0xpc3RDaGFuZ2VzIGltcGxlbWVudHMgbmcuSU9uQ2hhbmdlc09iamVjdCwgSVRhZ0xpc3RCaW5kaW5ncyB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogbmcuSUNoYW5nZXNPYmplY3Q8YW55PjtcclxuICAgICAgICBcclxuICAgICAgICB0YWdzOiBuZy5JQ2hhbmdlc09iamVjdDxzdHJpbmdbXT47XHJcbiAgICAgICAgdHlwZTogbmcuSUNoYW5nZXNPYmplY3Q8c3RyaW5nPjtcclxuICAgICAgICB0eXBlTG9jYWw6IG5nLklDaGFuZ2VzT2JqZWN0PHN0cmluZz47XHJcbiAgICAgICAgcmVidWlkOiBuZy5JQ2hhbmdlc09iamVjdDxib29sZWFuPlxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IFRhZ0xpc3QgPSB7XHJcbiAgICAgICAgYmluZGluZ3M6IFRhZ0xpc3RCaW5kaW5ncyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3RhZ19saXN0L3RhZ19saXN0Lmh0bWwnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IFRhZ0xpc3RDb250cm9sbGVyXHJcbiAgICB9XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ3BpcFRhZ0xpc3QnLCBbJ3BpcExpc3QuVHJhbnNsYXRlJ10pXHJcbiAgICAgICAgLmNvbXBvbmVudCgncGlwVGFnTGlzdCcsIFRhZ0xpc3QpXHJcblxyXG59KSgpOyIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBMaXN0cy5UZW1wbGF0ZXMnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcExpc3RzLlRlbXBsYXRlcycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGFnX2xpc3QvdGFnX2xpc3QuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJwaXAtY2hpcCBybTQgcGlwLXR5cGUtY2hpcCBwaXAtdHlwZS1jaGlwLWxlZnQge3tcXCdiZy1cXCcgKyAkY3RybC50eXBlICsgXFwnLWNoaXBzXFwnfX1cIlxcbicgK1xuICAgICcgICAgIG5nLWlmPVwiJGN0cmwudHlwZSAmJiAhJGN0cmwudHlwZUxvY2FsXCI+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPHNwYW4+e3skY3RybC50eXBlLnRvVXBwZXJDYXNlKCkgfCB0cmFuc2xhdGUgfCB1cHBlcmNhc2V9fTwvc3Bhbj5cXG4nICtcbiAgICAnPC9kaXY+XFxuJyArXG4gICAgJzxkaXYgY2xhc3M9XCJwaXAtY2hpcCBybTQgcGlwLXR5cGUtY2hpcCBwaXAtdHlwZS1jaGlwLWxlZnQge3tcXCdiZy1cXCcgKyAkY3RybC50eXBlICsgXFwnLWNoaXBzXFwnfX1cIlxcbicgK1xuICAgICcgICAgIG5nLWlmPVwiJGN0cmwudHlwZSAmJiAkY3RybC50eXBlTG9jYWxcIj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICA8c3Bhbj57eyRjdHJsLnR5cGVMb2NhbC50b1VwcGVyQ2FzZSgpIHwgdHJhbnNsYXRlIHwgdXBwZXJjYXNlfX08L3NwYW4+XFxuJyArXG4gICAgJzwvZGl2PlxcbicgK1xuICAgICc8ZGl2IGNsYXNzPVwicGlwLWNoaXAgcm00XCIgbmctcmVwZWF0PVwidGFnIGluICRjdHJsLnRhZ3NcIj5cXG4nICtcbiAgICAnICAgIDxzcGFuPnt7Ojp0YWd9fTwvc3Bhbj5cXG4nICtcbiAgICAnPC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXAtd2VidWktbGlzdHMtaHRtbC5qcy5tYXBcbiJdfQ=="}